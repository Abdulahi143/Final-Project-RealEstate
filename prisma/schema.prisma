generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ListingType {
  RENT
  SALE
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId
  isAdmin        Boolean? @default(false)

  accounts     Account[]
  forrent RentListings[]
  forSale SaleListings[]
  reservations Reservation[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model RentListings {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  imageSrc       String[]
  createdAt      DateTime @default(now())
  category       String
  furnished      String
  roomCount      Int
  bathroomCount  Int
  sizeCount      Int
  parkingCount   Int
  locationValue  String
  userId         String @db.ObjectId
  price          Int
  type           ListingType
  availability   Boolean?
  buildType      String?
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations   Reservation[]

  // New fields for fees
  totalPrice     Int?
  renterFee      Int?  // 5% fee for renters
  rentOwnerFee   Int?  // 7% fee for owners
}

model SaleListings {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  imageSrc       String[]
  createdAt      DateTime @default(now())
  category       String
  roomCount      Int
  bathroomCount  Int
  sizeCount      Int
  parkingCount   Int
  locationValue  String
  userId         String @db.ObjectId
  price          Int
  availability   Boolean?
  buildType      String?
  type           ListingType
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations   Reservation[]

  // New fields for fees
  totalPrice     Int?
  sellerFee      Int?  // 8% fee for sellers
  buyerFee       Int?  // 2% fee for buyers
}

model Reservation {
  id             String   @id @map("_id") @db.ObjectId
  RentListingsId String   @db.ObjectId
  SaleListingsId String   @db.ObjectId
  userId         String   @db.ObjectId
  forRentId      String?  @db.ObjectId // Optional if a reservation can be for rent or sale
  forSaleId      String?  @db.ObjectId // Optional if a reservation can be for rent or sale
  startDate      DateTime
  endDate        DateTime
  totalPrice     Int
  createdAt      DateTime @default(now())

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  RentListings   RentListings   @relation(fields: [RentListingsId], references: [id], onDelete: Cascade)
  SaleListings   SaleListings   @relation(fields: [SaleListingsId], references: [id], onDelete: Cascade)
}
